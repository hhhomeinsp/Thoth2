const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { PythonShell } = require('python-shell');
const pdfParse = require('pdf-parse');
const mammoth = require('mammoth');

const app = express();
const port = process.env.PORT || 5010;

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3005', 'http://localhost:5010'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));
app.use('/Documents', express.static('Documents'));
app.use('/Placeholders', express.static('Placeholders'));
app.use(express.static(path.join(__dirname, '..', 'build')));

// File upload configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'Documents/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    const filetypes = /pdf|doc|docx/;
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = filetypes.test(file.mimetype);
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb('Error: Only PDF, DOC, and DOCX files are allowed!');
    }
  }
});

// Ensure directories exist
['Documents', 'Placeholders', 'temp'].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }
});

// API endpoints
app.get('/api/convert-pdf/:filename', async (req, res) => {
  const filename = req.params.filename;
  const filePath = path.join(__dirname, '..', 'Documents', filename);

  if (!fs.existsSync(filePath)) {
    return res.status(404).json({ error: 'File not found' });
  }

  try {
    const dataBuffer = fs.readFileSync(filePath);
    const data = await pdfParse(dataBuffer);
    const html = `<pre>${data.text}</pre>`; // Wrap the text in a pre tag for better formatting
    res.send(html);
  } catch (error) {
    console.error('Error converting PDF to HTML:', error);
    res.status(500).json({ error: 'Failed to convert PDF to HTML', message: error.message });
  }
});

app.post('/api/process-document', async (req, res) => {
  const { fileName, content } = req.body;
  
  if (!fileName || !content) {
    return res.status(400).json({ error: 'Missing required fields.' });
  }

  try {
    const decodedContent = Buffer.from(content, 'base64').toString('utf-8');
    const options = {
      mode: 'text',
      pythonPath: 'python', // This should work for both 'python' and 'python3' commands
      scriptPath: __dirname,
      args: [fileName, decodedContent]
    };

    console.log('Running Python script with options:', {
      ...options,
      args: [fileName, `${decodedContent.substring(0, 100)}...`] // Log only the first 100 characters of content
    });

    PythonShell.run('analyze_utils.py', options, function (err, results) {
      if (err) {
        console.error('Error running Python script:', err);
        return res.status(500).json({ error: 'Error processing document', details: err.message });
      }
      if (results && results.length > 0) {
        try {
          console.log('Raw Python script output:', results[0].substring(0, 1000)); // Log only the first 1000 characters
          const result = JSON.parse(results[0]);
          console.log('Analysis completed:', JSON.stringify(result, null, 2).substring(0, 1000)); // Log only the first 1000 characters
          res.json(result);
        } catch (parseError) {
          console.error('Error parsing Python script output:', parseError);
          return res.status(500).json({ error: 'Error parsing document analysis results', details: parseError.message });
        }
      } else {
        res.status(500).json({ error: 'No results from document analysis' });
      }
    });
  } catch (error) {
    console.error('Error processing document:', error);
    res.status(500).json({ error: 'Error processing document', details: error.message });
  }
});

app.post('/api/upload', upload.single('file'), (req, res) => {
  if (req.file) {
    console.log('File uploaded:', req.file.filename);
    res.json({ message: 'File uploaded successfully', file: req.file });
  } else {
    res.status(400).json({ message: 'No file uploaded' });
  }
});

app.get('/api/files', (req, res) => {
  fs.readdir('Documents', (err, files) => {
    if (err) {
      console.error('Error reading files:', err);
      res.status(500).json({ message: 'Error reading files' });
    } else {
      const fileList = files.map((file, index) => ({
        id: index + 1,
        name: file
      }));
      res.json(fileList);
    }
  });
});

app.delete('/api/files/:filename', (req, res) => {
  const filename = decodeURIComponent(req.params.filename);
  const filePath = path.join(__dirname, '..', 'Documents', filename);

  fs.unlink(filePath, (err) => {
    if (err) {
      console.error('Error deleting file:', err);
      if (err.code === 'ENOENT') {
        res.status(404).json({ message: 'File not found' });
      } else {
        res.status(500).json({ message: 'Error deleting file' });
      }
    } else {
      res.json({ message: 'File deleted successfully' });
    }
  });
});

app.post('/api/save-placeholders', (req, res) => {
  const { fileName, placeholders } = req.body;
  if (!fileName || !placeholders) {
    return res.status(400).json({ error: 'File name and placeholders are required.' });
  }

  const placeholdersFileName = `${fileName.split('.')[0]}_placeholders.json`;
  const placeholdersFilePath = path.join(__dirname, 'Placeholders', placeholdersFileName);

  try {
    fs.writeFileSync(placeholdersFilePath, JSON.stringify(placeholders, null, 2));
    console.log('Placeholders saved:', placeholdersFileName);
    res.json({ message: 'Placeholders saved successfully', file: placeholdersFileName });
  } catch (error) {
    console.error('Error saving placeholders:', error);
    res.status(500).json({ error: 'Failed to save placeholders' });
  }
});

app.post('/api/process-with-placeholders', (req, res) => {
  const { fileName, placeholders } = req.body;
  if (!fileName || !placeholders) {
    return res.status(400).json({ error: 'File name and placeholders are required.' });
  }

  const filePath = path.join(__dirname, 'Documents', fileName);
  
  if (!fs.existsSync(filePath)) {
    return res.status(404).json({ error: 'File not found.' });
  }

  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // Replace placeholders in the content
    Object.entries(placeholders).forEach(([placeholder, value]) => {
      content = content.replace(new RegExp(`\\[${placeholder}\\]`, 'g'), value);
    });

    // Create a new file with the processed content
    const processedFileName = `processed_${fileName}`;
    const processedFilePath = path.join(__dirname, 'Documents', processedFileName);
    fs.writeFileSync(processedFilePath, content);

    console.log('Document processed:', processedFileName);
    res.json({ message: 'Document processed successfully', file: processedFileName });
  } catch (error) {
    console.error('Error processing document:', error);
    res.status(500).json({ error: 'Error processing document' });
  }
});

// Catch-all route
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'build', 'index.html'));
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
